;; .emacs for older versions of Emacs.
(eval-when-compile (require 'cl))
(require 'package)

(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(package-initialize)
(defvar package-list '(
  ; Various editing modes, enable on demand
  ; lua-mode
  ; markdown-mode
  ; web-mode
  ; yaml-mode
  ; haskell-mode ghc
  flycheck smex neotree undo-tree evil multi-term editorconfig))

; fetch the list of packages available
(unless package-archive-contents (package-refresh-contents))

; install the missing packages
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))

(setq custom-file "~/.emacs.d/custom.el")
(load custom-file 'noerror)

; Basic Things
(set-language-environment "UTF-8")
(fset 'yes-or-no-p 'y-or-n-p)
(setq frame-title-format
  (concat  "%b - emacs@" (system-name)))

(defun linum-custom-format (offset)
  "Custom formatting function for relative line numbers. Space for 2 numbers then a line"
  (format "%2d\u2502" (abs offset)))

; Evil mode
(require 'evil)
(evil-mode t)
(define-key evil-insert-state-map (kbd "C-x TAB") 'indent-relative)
(defun evil-default-emacs-state (mode)
  (delete mode evil-insert-state-modes)
  (add-to-list 'evil-emacs-state-modes mode))
(evil-default-emacs-state 'term-mode)
(evil-default-emacs-state 'calculator-mode)

; Flycheck
(add-hook 'after-init-hook #'global-flycheck-mode)

(add-to-list 'display-buffer-alist
 `(,(rx bos "*Flycheck errors*" eos)
  (display-buffer-reuse-window
  display-buffer-in-side-window)
  (reusable-frames . visible)
  (side            . bottom)
  (window-height   . 0.4)))

; Close side windows
(defun quit-bottom-side-windows ()
  "Quit side windows of the current frame."
  (interactive)
  (dolist (window (window-at-side-list))
    (quit-window nil window)))

; General key bindings
(global-set-key (kbd "C-c q") #'quit-bottom-side-windows)
(global-set-key (kbd "C-\\") 'neotree-toggle)
(global-set-key (kbd "C-l") 'kill-whole-line)

(add-hook 'neotree-mode-hook
  (lambda ()
    (define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
    (define-key evil-normal-state-local-map (kbd "SPC") 'neotree-enter)
    (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
    (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)))

; Web mode
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.mhtml\\'" . web-mode))

; PuTTY's end key is broken (or mine is)
(global-set-key (kbd "<select>") 'move-end-of-line)

; Mouse support
(xterm-mouse-mode t)
(global-set-key (kbd "<mouse-4>") 'scroll-down-line)
(global-set-key (kbd "<mouse-5>") 'scroll-up-line)
(global-set-key (kbd "C-/") 'comment-or-uncomment-region)

; Show matching parens under curosr
(show-paren-mode 1)

; I can't remember the REPL name
(defalias 'repl 'ielm)

; Show title in buffer
(defvar last-buffer "")
(defun xterm-title-update ()
  (interactive)
  (if (string= last-buffer (buffer-name)) nil
    (setq last-buffer (buffer-name))
    (send-string-to-terminal (concat "\033]2; " (if buffer-file-name (buffer-file-name) (buffer-name)) " - emacs\007"))))

(add-hook 'post-command-hook 'xterm-title-update)

; Use default groupings
(add-hook 'ibuffer-hook (lambda() (ibuffer-switch-to-saved-filter-groups "Default")))

; Use IDO in everything
(require 'ido)
(ido-everywhere t)
(ido-mode (quote both) nil (ido))
(global-set-key (kbd "M-x") 'smex)
